import axios from "axios";
import API_CONFIG from "@/config/api";
import Cookies from "js-cookie";

// ============================================
// CREATE AXIOS INSTANCE
// ============================================
const axiosClient = axios.create({
  baseURL: API_CONFIG.BASE_URL || "http://localhost:8017/v1",
  headers: {
    "Content-Type": "application/json",
    Accept: "application/json",
  },
  timeout: 30000, // 30 seconds
});

// ============================================
// REQUEST INTERCEPTOR
// ============================================
axiosClient.interceptors.request.use(
  (config) => {
    // L·∫•y JWT token t·ª´ cookie
    const token = Cookies.get("jwt");

    // T·ª± ƒë·ªông g·∫Øn token v√†o header n·∫øu c√≥
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
      console.log("üîê [Axios] Token attached to request");
    } else {
      console.log("‚ö†Ô∏è [Axios] No token found");
    }

    // Log request info
    console.log("üöÄ [Axios Request]", {
      method: config.method.toUpperCase(),
      url: config.url,
      baseURL: config.baseURL,
      fullURL: `${config.baseURL}${config.url}`,
      headers: config.headers,
      data: config.data,
    });

    return config;
  },
  (error) => {
    console.error("‚ùå [Axios Request Error]", error);
    return Promise.reject(error);
  }
);

// ============================================
// RESPONSE INTERCEPTOR
// ============================================
axiosClient.interceptors.response.use(
  (response) => {
    // Log response info
    console.log("‚úÖ [Axios Response]", {
      status: response.status,
      url: response.config.url,
      data: response.data,
    });

    // Tr·∫£ v·ªÅ data (kh√¥ng c·∫ßn response.data.data)
    return response.data;
  },
  (error) => {
    console.error("‚ùå [Axios Response Error]", {
      status: error.response?.status,
      url: error.config?.url,
      message: error.response?.data?.message || error.message,
      data: error.response?.data,
    });

    // ============================================
    // X·ª¨ L√ù L·ªñI 401 - UNAUTHORIZED
    // ============================================
    if (error.response?.status === 401) {
      console.error("üö´ [401] Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n");

      // X√≥a token v√† th√¥ng tin user
      Cookies.remove("jwt");
      Cookies.remove("role");
      localStorage.removeItem("user");

      // Redirect v·ªÅ trang login
      if (typeof window !== "undefined") {
        const currentPath = window.location.pathname;

        // Ki·ªÉm tra ƒëang ·ªü admin hay user site
        if (currentPath.startsWith("/admin")) {
          console.log("‚û°Ô∏è Redirect v·ªÅ /admin/auth/login");
          window.location.href = "/admin/auth/login";
        } else {
          console.log("‚û°Ô∏è Redirect v·ªÅ /site/auth/login");
          window.location.href = "/site/auth/login";
        }
      }
    }

    // ============================================
    // X·ª¨ L√ù L·ªñI 403 - FORBIDDEN
    // ============================================
    if (error.response?.status === 403) {
      console.error("üö´ [403] Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p");

      if (typeof window !== "undefined") {
        alert("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ch·ª©c nƒÉng n√†y!");
      }
    }

    // ============================================
    // X·ª¨ L√ù L·ªñI 404 - NOT FOUND
    // ============================================
    if (error.response?.status === 404) {
      console.error("üö´ [404] Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu");
    }

    // ============================================
    // X·ª¨ L√ù L·ªñI 500 - SERVER ERROR
    // ============================================
    if (error.response?.status >= 500) {
      console.error("üö´ [500+] L·ªói server");

      if (typeof window !== "undefined") {
        alert("L·ªói server! Vui l√≤ng th·ª≠ l·∫°i sau.");
      }
    }

    // ============================================
    // X·ª¨ L√ù NETWORK ERROR
    // ============================================
    if (error.message === "Network Error") {
      console.error("üö´ [Network Error] Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server");

      if (typeof window !== "undefined") {
        alert("Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server! Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.");
      }
    }

    // Tr·∫£ v·ªÅ l·ªói ƒë·ªÉ component x·ª≠ l√Ω
    return Promise.reject(error.response?.data || error);
  }
);

// ============================================
// EXPORT
// ============================================
export default axiosClient;
"use client";

import React, { useEffect, useState } from "react";
import Link from "next/link";
import { FaCalendarAlt, FaArrowLeft, FaRegCopy, FaCheck } from "react-icons/fa";
import { getBookings, updateBooking } from "@/services/bookingService";
import { getFields } from "@/services/fieldService";
import { toast } from "react-toastify";

export default function AdminScheduleListPage() {
  const [bookings, setBookings] = useState([]);
  const [copiedIdx, setCopiedIdx] = useState(null);
  const [loading, setLoading] = useState(true);
  const [fields, setFields] = useState([]);

  useEffect(() => {
    fetchBookings();
    fetchFields();
  }, []);


  async function fetchFields() {
    try {
      const res = await getFields();
      const data = Array.isArray(res.data) ? res.data : res.data?.data || [];
      setFields(data);
    } catch (error) {
      console.error("‚ùå L·ªói t·∫£i danh s√°ch s√¢n:", error);
    }
  }

  // üß© Load danh s√°ch l·ªãch ƒë·∫∑t
  async function fetchBookings() {
    try {
      const res = await getBookings();
      const data = Array.isArray(res.data) ? res.data : res.data?.data || [];
      setBookings(data);
    } catch (error) {
      console.error("‚ùå L·ªói t·∫£i danh s√°ch l·ªãch:", error);
      toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch l·ªãch ƒë·∫∑t!");
    } finally {
      setLoading(false);
    }
  }

  function getFieldName(fieldId) {
    const field = fields.find((f) => String(f._id) === String(fieldId));
    return field ? field.name : "‚Äî";
  }

  // üìã Copy m√£ booking
  async function copyCode(code, idx) {
    await navigator.clipboard.writeText(code);
    setCopiedIdx(idx);
    setTimeout(() => setCopiedIdx(null), 1200);
  }

  // ‚úÖ Duy·ªát / T·ª´ ch·ªëi / H·ªßy l·ªãch
  async function handleApprove(id, status) {
    try {
      await updateBooking(id, { status });
      toast.success(
        status === "confirmed"
          ? "‚úÖ ƒê√£ duy·ªát ƒë·∫∑t s√¢n!"
          : status === "cancelled_admin"
            ? "‚ùå ƒê√£ h·ªßy l·ªãch ƒë·∫∑t!"
            : "üóëÔ∏è ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i!"
      );
      fetchBookings(); // reload danh s√°ch
    } catch (err) {
      console.error("‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i:", err);
      toast.error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i!");
    }
  }

  // üéØ H√†m ki·ªÉm tra xem l·ªãch ƒë√£ qua gi·ªù ch∆∞a
  function isPastBooking(b) {
    try {
      const date = new Date(b.bookingDate);
      const [endH, endM] = b.endTime.split(":").map(Number);
      const endTime = new Date(date);
      endTime.setHours(endH, endM, 0, 0);
      return new Date() > endTime;
    } catch {
      return false;
    }
  }

  // üé® Hi·ªÉn th·ªã tr·∫°ng th√°i
  function renderStatus(b) {
    const { status } = b;

    // ‚úÖ N·∫øu ƒë√£ duy·ªát v√† qua gi·ªù th√¨ coi nh∆∞ ‚ÄúHo√†n th√†nh‚Äù
    if (status === "confirmed" && isPastBooking(b)) {
      return (
        <span className="px-2 py-1 rounded text-xs font-semibold bg-green-200 text-green-800">
          üèÅ Ho√†n th√†nh
        </span>
      );
    }

    switch (status) {
      case "confirmed":
        return (
          <span className="px-2 py-1 rounded text-xs font-semibold bg-green-100 text-green-700">
            ‚úÖ ƒê√£ duy·ªát
          </span>
        );
      case "pending":
        return (
          <span className="px-2 py-1 rounded text-xs font-semibold bg-yellow-100 text-yellow-700">
            ‚è≥ Ch·ªù duy·ªát
          </span>
        );
      case "cancelled_admin":
        return (
          <span className="px-2 py-1 rounded text-xs font-semibold bg-red-100 text-red-700">
            ‚ùå B·ªã h·ªßy b·ªüi Admin
          </span>
        );
      case "cancelled_no_refund":
      case "cancelled_refunded":
        return (
          <span className="px-2 py-1 rounded text-xs font-semibold bg-gray-100 text-gray-600">
            üö´ Ng∆∞·ªùi d√πng h·ªßy
          </span>
        );
      default:
        return (
          <span className="px-2 py-1 rounded text-xs font-semibold bg-gray-50 text-gray-600">
            Kh√¥ng x√°c ƒë·ªãnh
          </span>
        );
    }
  }

  if (loading)
    return <p className="p-6 text-gray-500">ƒêang t·∫£i danh s√°ch l·ªãch ƒë·∫∑t...</p>;

  return (
    <div className="bg-gradient-to-br from-green-200 to-blue-200 min-h-screen py-10 px-4">
      <div className="max-w-6xl mx-auto bg-white/90 backdrop-blur-md p-6 rounded-2xl shadow-lg">
        {/* Header */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-3">
            <FaCalendarAlt className="text-2xl text-green-700" />
            <h1 className="text-2xl font-extrabold text-green-700">
              Danh s√°ch l·ªãch ƒë√£ ƒë·∫∑t
            </h1>
          </div>
          <Link
            href="/admin/fields"
            className="inline-flex items-center gap-2 border px-4 py-2 rounded-xl hover:bg-gray-50"
          >
            <FaArrowLeft /> Quay l·∫°i danh s√°ch s√¢n
          </Link>
        </div>

        {/* Table */}
        <div className="overflow-x-auto">
          <table className="table-auto w-full border-collapse border border-gray-300 text-sm">
            <thead>
              <tr className="bg-gray-100 text-left">
                <th className="border px-3 py-2">M√£ ƒë·∫∑t</th>
                <th className="border px-3 py-2">Ng√†y</th>
                <th className="border px-3 py-2">Gi·ªù</th>
                <th className="border px-3 py-2">S√¢n</th>
                <th className="border px-3 py-2">Ng∆∞·ªùi ƒë·∫∑t</th>
                <th className="border px-3 py-2">SƒêT</th>
                <th className="border px-3 py-2">Tr·∫°ng th√°i</th>
                <th className="border px-3 py-2 text-center">H√†nh ƒë·ªông</th>
              </tr>
            </thead>
            <tbody>
              {bookings.length === 0 ? (
                <tr>
                  <td colSpan={8} className="text-center text-gray-500 py-6">
                    Ch∆∞a c√≥ l·ªãch ƒë·∫∑t n√†o
                  </td>
                </tr>
              ) : (
                bookings.map((b, i) => {
                  const isPast = isPastBooking(b);

                  return (
                    <tr key={b._id || i} className="hover:bg-gray-50">
                      {/* M√£ ƒë·∫∑t */}
                      <td className="border px-3 py-2">
                        <div className="flex items-center gap-2">
                          <span className="font-mono text-xs">{b._id}</span>
                          <button
                            onClick={() => copyCode(b._id, i)}
                            className="px-2 py-1 rounded border hover:bg-gray-50 text-xs flex items-center gap-1"
                          >
                            {copiedIdx === i ? (
                              <FaCheck className="text-green-600" />
                            ) : (
                              <FaRegCopy />
                            )}
                            {copiedIdx === i ? "ƒê√£ copy" : "Copy"}
                          </button>
                        </div>
                      </td>

                      {/* Ng√†y & gi·ªù */}
                      <td className="border px-3 py-2">
                        {new Date(b.bookingDate).toLocaleDateString("vi-VN")}
                      </td>
                      <td className="border px-3 py-2">
                        {b.startTime} - {b.endTime}
                      </td>

                      {/* S√¢n */}
                      <td className="border px-3 py-2">{getFieldName(b.fieldId)}</td>

                      {/* Ng∆∞·ªùi ƒë·∫∑t */}
                      <td className="border px-3 py-2">{b.userName || "-"}</td>
                      <td className="border px-3 py-2">{b.userPhone || "-"}</td>

                      {/* Tr·∫°ng th√°i */}
                      <td className="border px-3 py-2">{renderStatus(b)}</td>

                      {/* H√†nh ƒë·ªông */}
                      <td className="border px-3 py-2 text-center">
                        {b.status === "pending" ? (
                          <div className="flex gap-2 justify-center">
                            <button
                              onClick={() => handleApprove(b._id, "confirmed")}
                              className="bg-green-600 text-white px-3 py-1 rounded hover:bg-green-700 text-xs"
                            >
                              Duy·ªát
                            </button>
                            <button
                              onClick={() =>
                                handleApprove(b._id, "cancelled_admin")
                              }
                              className="bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700 text-xs"
                            >
                              T·ª´ ch·ªëi
                            </button>
                          </div>
                        ) : b.status === "confirmed" && !isPast ? (
                          <button
                            onClick={() =>
                              handleApprove(b._id, "cancelled_admin")
                            }
                            className="bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700 text-xs"
                          >
                            H·ªßy l·ªãch
                          </button>
                        ) : (
                          "-" // ƒê√£ ho√†n th√†nh ho·∫∑c b·ªã h·ªßy
                        )}
                      </td>
                    </tr>
                  );
                })
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}
